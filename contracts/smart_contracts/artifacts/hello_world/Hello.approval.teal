#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 123
    bytecblock "counter" "nextVal" "metaData" 0x151f7c75 "customKey"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:16
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    bytec_0 // "counter"
    intc_0 // 0
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:17
    // globalState = GlobalState<uint64>({ initialValue: 123, key: 'customKey' })
    bytec 4 // "customKey"
    intc_2 // 123
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:18
    // globalState1 = GlobalState<uint64>({ initialValue: 123, key: 'customKey' })
    bytec 4 // "customKey"
    intc_2 // 123
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:20
    // tokenId = GlobalState<string>({ initialValue: '1' })
    pushbytess "tokenId" "1" // "tokenId", "1"
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:21
    // tokenDesc = GlobalState<string>({ initialValue: '' })
    pushbytess "tokenDesc" "" // "tokenDesc", ""
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:22
    // metaData = GlobalState<string>({ initialValue: '' })
    bytec_2 // "metaData"
    pushbytes ""
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:23
    // nextVal = GlobalState<uint64>({ initialValue: 0, key: 'nextVal' })
    bytec_1 // "nextVal"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:15
    // export class Hello extends Contract {
    txn NumAppArgs
    bz main_bare_routing@10
    pushbytess 0x4a325901 0xbbad8387 0xefadad45 // method "increment()uint64", method "mint(string)uint64", method "getLatestMetaData()string"
    txna ApplicationArgs 0
    match main_increment_route@5 main_mint_route@6 main_getLatestMetaData_route@7

main_after_if_else@14:
    // smart_contracts/hello_world/contract.algo.ts:15
    // export class Hello extends Contract {
    intc_0 // 0
    return

main_getLatestMetaData_route@7:
    // smart_contracts/hello_world/contract.algo.ts:51
    // public getLatestMetaData(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getLatestMetaData
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_mint_route@6:
    // smart_contracts/hello_world/contract.algo.ts:42
    // public mint(metaData: string): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:15
    // export class Hello extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    // smart_contracts/hello_world/contract.algo.ts:42
    // public mint(metaData: string): uint64 {
    callsub mint
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_increment_route@5:
    // smart_contracts/hello_world/contract.algo.ts:32
    // public increment(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub increment
    itob
    bytec_3 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@10:
    // smart_contracts/hello_world/contract.algo.ts:15
    // export class Hello extends Contract {
    txn OnCompletion
    bnz main_after_if_else@14
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::Hello.increment() -> uint64:
increment:
    // smart_contracts/hello_world/contract.algo.ts:16
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:33
    // this.counter.value = this.counter.value + 1
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:16
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    bytec_0 // "counter"
    // smart_contracts/hello_world/contract.algo.ts:33
    // this.counter.value = this.counter.value + 1
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:16
    // public counter = GlobalState<uint64>({ initialValue: Uint64(0) })
    intc_0 // 0
    bytec_0 // "counter"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:34
    // return this.counter.value
    retsub


// smart_contracts/hello_world/contract.algo.ts::Hello.mint(metaData: bytes) -> uint64:
mint:
    // smart_contracts/hello_world/contract.algo.ts:42
    // public mint(metaData: string): uint64 {
    proto 1 1
    // smart_contracts/hello_world/contract.algo.ts:22
    // metaData = GlobalState<string>({ initialValue: '' })
    bytec_2 // "metaData"
    // smart_contracts/hello_world/contract.algo.ts:46
    // this.metaData.value = metaData;
    frame_dig -1
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:23
    // nextVal = GlobalState<uint64>({ initialValue: 0, key: 'nextVal' })
    intc_0 // 0
    bytec_1 // "nextVal"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:47
    // this.nextVal.value = this.nextVal.value + 1;
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:23
    // nextVal = GlobalState<uint64>({ initialValue: 0, key: 'nextVal' })
    bytec_1 // "nextVal"
    // smart_contracts/hello_world/contract.algo.ts:47
    // this.nextVal.value = this.nextVal.value + 1;
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:23
    // nextVal = GlobalState<uint64>({ initialValue: 0, key: 'nextVal' })
    intc_0 // 0
    bytec_1 // "nextVal"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:48
    // return this.nextVal.value;
    retsub


// smart_contracts/hello_world/contract.algo.ts::Hello.getLatestMetaData() -> bytes:
getLatestMetaData:
    // smart_contracts/hello_world/contract.algo.ts:22
    // metaData = GlobalState<string>({ initialValue: '' })
    intc_0 // 0
    bytec_2 // "metaData"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:52
    // return this.metaData.value;
    retsub
