/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Hello","structs":{},"methods":[{"name":"increment","args":[],"returns":{"type":"uint64","desc":"The new counter value"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Increments the counter and returns the new value","events":[],"recommendations":{}},{"name":"mint","args":[{"type":"string","name":"metaData"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLatestMetaData","args":[],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"desc":"A contract that increments a counter","networks":{},"state":{"schema":{"global":{"ints":4,"bytes":3},"local":{"ints":0,"bytes":0}},"keys":{"global":{"counter":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y291bnRlcg=="},"globalState":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VzdG9tS2V5"},"globalState1":{"keyType":"AVMString","valueType":"AVMUint64","key":"Y3VzdG9tS2V5"},"tokenId":{"keyType":"AVMString","valueType":"AVMString","key":"dG9rZW5JZA=="},"tokenDesc":{"keyType":"AVMString","valueType":"AVMString","key":"dG9rZW5EZXNj"},"metaData":{"keyType":"AVMString","valueType":"AVMString","key":"bWV0YURhdGE="},"nextVal":{"keyType":"AVMString","valueType":"AVMUint64","key":"bmV4dFZhbA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[136,160,183],"errorMessage":"OnCompletion is not NoOp"},{"pc":[205],"errorMessage":"can only call when creating"},{"pc":[139,163,186],"errorMessage":"can only call when not creating"},{"pc":[211,220,232,241,246],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiADAAF7JgUHY291bnRlcgduZXh0VmFsCG1ldGFEYXRhBBUffHUJY3VzdG9tS2V5MRhAAC0oImcnBCRnJwQkZ4ICB3Rva2VuSWQBMWeCAgl0b2tlbkRlc2MAZyqAAGcpImcxG0EAXoIDBEoyWQEEu62DhwTvra1FNhoAjgMAMQAaAAIiQzEZFEQxGESIAGRJFRZXBgJMUCtMULAjQzEZFEQxGEQ2GgFXAgCIADEWK0xQsCNDMRkURDEYRIgAEhYrTFCwI0MxGUD/uTEYFEQjQyIoZUQjCChMZyIoZUSJigEBKov/ZyIpZUQjCClMZyIpZUSJIiplRIk=","clear":"CoEBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the Hello contract
 */
export type HelloArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'increment()uint64': Record<string, never>
    'mint(string)uint64': {
      metaData: string
    }
    'getLatestMetaData()string': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'increment()uint64': []
    'mint(string)uint64': [metaData: string]
    'getLatestMetaData()string': []
  }
}

/**
 * The return type for each method
 */
export type HelloReturns = {
  'increment()uint64': bigint
  'mint(string)uint64': bigint
  'getLatestMetaData()string': string
}

/**
 * Defines the types of available calls and state of the Hello smart contract.
 */
export type HelloTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'increment()uint64' | 'increment', {
      argsObj: HelloArgs['obj']['increment()uint64']
      argsTuple: HelloArgs['tuple']['increment()uint64']
      /**
       * The new counter value
       */
      returns: HelloReturns['increment()uint64']
    }>
    & Record<'mint(string)uint64' | 'mint', {
      argsObj: HelloArgs['obj']['mint(string)uint64']
      argsTuple: HelloArgs['tuple']['mint(string)uint64']
      returns: HelloReturns['mint(string)uint64']
    }>
    & Record<'getLatestMetaData()string' | 'getLatestMetaData', {
      argsObj: HelloArgs['obj']['getLatestMetaData()string']
      argsTuple: HelloArgs['tuple']['getLatestMetaData()string']
      returns: HelloReturns['getLatestMetaData()string']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        counter: bigint
        globalState: bigint
        globalState1: bigint
        tokenId: string
        tokenDesc: string
        metaData: string
        nextVal: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type HelloSignatures = keyof HelloTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type HelloNonVoidMethodSignatures = keyof HelloTypes['methods'] extends infer T ? T extends keyof HelloTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Hello smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends HelloSignatures> = HelloTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Hello smart contract to the method's return type
 */
export type MethodReturn<TSignature extends HelloSignatures> = HelloTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = HelloTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type HelloCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type HelloDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: HelloCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Hello smart contract
 */
export abstract class HelloParamsFactory {
  /**
   * Constructs a no op call for the increment()uint64 ABI method
   *
   * Increments the counter and returns the new value
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static increment(params: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'increment()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the mint(string)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static mint(params: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'mint(string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.metaData],
    }
  }
  /**
   * Constructs a no op call for the getLatestMetaData()string ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLatestMetaData(params: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLatestMetaData()string' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Hello smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class HelloFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `HelloFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new HelloClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new HelloClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Hello smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: HelloDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new HelloClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Hello smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Hello smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Hello smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new HelloClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Hello smart contract
 */
export class HelloClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `HelloClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Hello app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `HelloClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends HelloNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `HelloClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<HelloClient> {
    return new HelloClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `HelloClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<HelloClient> {
    return new HelloClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Hello smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Hello smart contract using the `increment()uint64` ABI method.
     *
     * Increments the counter and returns the new value
     *
     * @param params The params for the smart contract call
     * @returns The call params: The new counter value
     */
    increment: (params: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloParamsFactory.increment(params))
    },

    /**
     * Makes a call to the Hello smart contract using the `mint(string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    mint: (params: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(HelloParamsFactory.mint(params))
    },

    /**
     * Makes a call to the Hello smart contract using the `getLatestMetaData()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLatestMetaData: (params: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(HelloParamsFactory.getLatestMetaData(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Hello smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Hello smart contract using the `increment()uint64` ABI method.
     *
     * Increments the counter and returns the new value
     *
     * @param params The params for the smart contract call
     * @returns The call transaction: The new counter value
     */
    increment: (params: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloParamsFactory.increment(params))
    },

    /**
     * Makes a call to the Hello smart contract using the `mint(string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    mint: (params: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(HelloParamsFactory.mint(params))
    },

    /**
     * Makes a call to the Hello smart contract using the `getLatestMetaData()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLatestMetaData: (params: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(HelloParamsFactory.getLatestMetaData(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Hello smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Hello smart contract using the `increment()uint64` ABI method.
     *
     * Increments the counter and returns the new value
     *
     * @param params The params for the smart contract call
     * @returns The call result: The new counter value
     */
    increment: async (params: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloParamsFactory.increment(params))
      return {...result, return: result.return as unknown as (undefined | HelloReturns['increment()uint64'])}
    },

    /**
     * Makes a call to the Hello smart contract using the `mint(string)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    mint: async (params: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(HelloParamsFactory.mint(params))
      return {...result, return: result.return as unknown as (undefined | HelloReturns['mint(string)uint64'])}
    },

    /**
     * Makes a call to the Hello smart contract using the `getLatestMetaData()string` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLatestMetaData: async (params: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(HelloParamsFactory.getLatestMetaData(params))
      return {...result, return: result.return as unknown as (undefined | HelloReturns['getLatestMetaData()string'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new HelloClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Hello app
   */
  state = {
    /**
     * Methods to access global state for the current Hello app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          counter: result.counter,
          globalState: result.globalState,
          globalState1: result.globalState1,
          tokenId: result.tokenId,
          tokenDesc: result.tokenDesc,
          metaData: result.metaData,
          nextVal: result.nextVal,
        }
      },
      /**
       * Get the current value of the counter key in global state
       */
      counter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("counter")) as bigint | undefined },
      /**
       * Get the current value of the globalState key in global state
       */
      globalState: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalState")) as bigint | undefined },
      /**
       * Get the current value of the globalState1 key in global state
       */
      globalState1: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("globalState1")) as bigint | undefined },
      /**
       * Get the current value of the tokenId key in global state
       */
      tokenId: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("tokenId")) as string | undefined },
      /**
       * Get the current value of the tokenDesc key in global state
       */
      tokenDesc: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("tokenDesc")) as string | undefined },
      /**
       * Get the current value of the metaData key in global state
       */
      metaData: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("metaData")) as string | undefined },
      /**
       * Get the current value of the nextVal key in global state
       */
      nextVal: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("nextVal")) as bigint | undefined },
    },
  }

  public newGroup(): HelloComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a increment()uint64 method call against the Hello contract
       */
      increment(params: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.increment(params)))
        resultMappers.push((v) => client.decodeReturnValue('increment()uint64', v))
        return this
      },
      /**
       * Add a mint(string)uint64 method call against the Hello contract
       */
      mint(params: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.mint(params)))
        resultMappers.push((v) => client.decodeReturnValue('mint(string)uint64', v))
        return this
      },
      /**
       * Add a getLatestMetaData()string method call against the Hello contract
       */
      getLatestMetaData(params: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLatestMetaData(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLatestMetaData()string', v))
        return this
      },
      /**
       * Add a clear state call to the Hello contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as HelloComposer
  }
}
export type HelloComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the increment()uint64 ABI method.
   *
   * Increments the counter and returns the new value
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  increment(params?: CallParams<HelloArgs['obj']['increment()uint64'] | HelloArgs['tuple']['increment()uint64']>): HelloComposer<[...TReturns, HelloReturns['increment()uint64'] | undefined]>

  /**
   * Calls the mint(string)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(params?: CallParams<HelloArgs['obj']['mint(string)uint64'] | HelloArgs['tuple']['mint(string)uint64']>): HelloComposer<[...TReturns, HelloReturns['mint(string)uint64'] | undefined]>

  /**
   * Calls the getLatestMetaData()string ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLatestMetaData(params?: CallParams<HelloArgs['obj']['getLatestMetaData()string'] | HelloArgs['tuple']['getLatestMetaData()string']>): HelloComposer<[...TReturns, HelloReturns['getLatestMetaData()string'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Hello smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): HelloComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): HelloComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<HelloComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<HelloComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<HelloComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<HelloComposerResults<TReturns>>
}
export type HelloComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

