{
    "hints": {
        "increment()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "mint(string)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLatestMetaData()string": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "counter": {
                    "type": "uint64",
                    "key": "counter"
                },
                "globalState": {
                    "type": "uint64",
                    "key": "customKey"
                },
                "globalState1": {
                    "type": "uint64",
                    "key": "customKey"
                },
                "metaData": {
                    "type": "bytes",
                    "key": "metaData"
                },
                "nextVal": {
                    "type": "uint64",
                    "key": "nextVal"
                },
                "tokenDesc": {
                    "type": "bytes",
                    "key": "tokenDesc"
                },
                "tokenId": {
                    "type": "bytes",
                    "key": "tokenId"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "Hello",
        "desc": "A contract that increments a counter",
        "methods": [
            {
                "name": "increment",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64",
                    "desc": "The new counter value"
                },
                "desc": "Increments the counter and returns the new value"
            },
            {
                "name": "mint",
                "args": [
                    {
                        "type": "string",
                        "name": "metaData"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getLatestMetaData",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "string"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}